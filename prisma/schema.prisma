// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  churches Church[]
}

model Church {
  id          String        @id @default(cuid())
  name        String
  address     String?
  contact     String?
  users       User[]
  actionUnits ActionUnits[]
  Students    Students[]
}

model ActionUnits {
  id                   String  @id @default(cuid())
  actionName           String
  teacherName          String
  assistantTeacherName String?
  secretaryName        String

  students     Students[]
  requirements Requirements[]

  churchId   String
  church     Church       @relation(fields: [churchId], references: [id])
  Attendance AttendanceList[]
}

model Students {
  id        String    @id @default(cuid())
  name      String
  contact   String?
  email     String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  image     String?

  actionUnitsId String
  ActionUnits   ActionUnits @relation(fields: [actionUnitsId], references: [id])

  churchId   String
  Church     Church       @relation(fields: [churchId], references: [id])
  Attendance AttendanceList[]
}

model Requirements {
  id                 String   @id @default(cuid())
  dateOfRequirements DateTime
  studentsWithLesson Int?     @default(0)
  dailyStudy         Int?     @default(0)
  smallGroup         Int?     @default(0)
  solidarityAction   Int?     @default(0)
  doubleMissionary   Int?     @default(0)
  bibleStudies       Int?     @default(0)
  baptized           Int?     @default(0)
  challengeOfTheWeek Int?     @default(0)

  ActionUnits   ActionUnits? @relation(fields: [actionUnitsId], references: [id])
  actionUnitsId String?
}

model AttendanceList {
  id        String   @id @default(cuid())
  date      DateTime @default(now())
  isPresent Boolean @default(false)

  studentId String
  Student   Students @relation(fields: [studentId], references: [id])

  actionUnitsId String
  ActionUnits   ActionUnits @relation(fields: [actionUnitsId], references: [id])
}
